{"version":3,"file":"node_modules_react-native-screens_src_index_native_tsx-_a6cb1.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-freeze/src/index.tsx","webpack:///./node_modules/react-native-screens/src/TransitionProgressContext.tsx","webpack:///./node_modules/react-native-screens/src/index.native.tsx","webpack:///./node_modules/react-native-screens/src/useTransitionProgress.tsx","webpack:///./node_modules/react-native-screens/src/utils.ts"],"sourcesContent":["import React, { useRef, Suspense, Fragment } from \"react\";\n\ninterface StorageRef {\n  promise?: Promise<void>;\n  resolve?: (value: void | PromiseLike<void>) => void;\n}\n\nfunction Suspender({\n  freeze,\n  children,\n}: {\n  freeze: boolean;\n  children: React.ReactNode;\n}) {\n  const promiseCache = useRef<StorageRef>({}).current;\n  if (freeze && !promiseCache.promise) {\n    promiseCache.promise = new Promise((resolve) => {\n      promiseCache.resolve = resolve;\n    });\n    throw promiseCache.promise;\n  } else if (freeze) {\n    throw promiseCache.promise;\n  } else if (promiseCache.promise) {\n    promiseCache.resolve!();\n    promiseCache.promise = undefined;\n  }\n\n  return <Fragment>{children}</Fragment>;\n}\n\ninterface Props {\n  freeze: boolean;\n  children: React.ReactNode;\n  placeholder?: React.ReactNode;\n}\n\nexport function Freeze({ freeze, children, placeholder = null }: Props) {\n  return (\n    <Suspense fallback={placeholder}>\n      <Suspender freeze={freeze}>{children}</Suspender>\n    </Suspense>\n  );\n}\n","import * as React from 'react';\nimport { Animated } from 'react-native';\n\ntype TransitionProgressContextBody = {\n  progress: Animated.Value;\n  closing: Animated.Value;\n  goingForward: Animated.Value;\n};\n\nexport default React.createContext<TransitionProgressContextBody | undefined>(\n  undefined\n);\n","import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<View>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  const { children, ...rest } = props;\n  const size = React.Children.count(children);\n  // freezes all screens except the top one\n  const childrenWithFreeze = React.Children.map(children, (child, index) => {\n    // @ts-expect-error it's either SceneView in v6 or RouteView in v5\n    const { props, key } = child;\n    const descriptor = props?.descriptor ?? props?.descriptors?.[key];\n    const freezeEnabled = descriptor?.options?.freezeOnBlur ?? ENABLE_FREEZE;\n\n    return (\n      <DelayedFreeze freeze={freezeEnabled && size - index > 1}>\n        {child}\n      </DelayedFreeze>\n    );\n  });\n\n  return (\n    <ScreensNativeModules.NativeScreenStack {...rest}>\n      {childrenWithFreeze}\n    </ScreensNativeModules.NativeScreenStack>\n  );\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass InnerScreen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const {\n      enabled = ENABLE_SCREENS,\n      freezeOnBlur = ENABLE_FREEZE,\n      ...rest\n    } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        gestureResponseDistance,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const handleRef = (ref: ViewConfig) => {\n        if (ref?.viewConfig?.validAttributes?.style) {\n          ref.viewConfig.validAttributes.style = {\n            ...ref.viewConfig.validAttributes.style,\n            display: false,\n          };\n          this.setRef(ref);\n        }\n      };\n\n      return (\n        <DelayedFreeze freeze={freezeOnBlur && activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            activityState={activityState}\n            gestureResponseDistance={{\n              start: gestureResponseDistance?.start ?? -1,\n              end: gestureResponseDistance?.end ?? -1,\n              top: gestureResponseDistance?.top ?? -1,\n              bottom: gestureResponseDistance?.bottom ?? -1,\n            }}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={handleRef}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }>\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}>\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </DelayedFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `useReanimatedTransitionProgress` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(InnerScreen);\n\nclass Screen extends React.Component<ScreenProps> {\n  static contextType = ScreenContext;\n\n  render() {\n    const ScreenWrapper = this.context || InnerScreen;\n    return <ScreenWrapper {...this.props} />;\n  }\n}\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n  InnerScreen,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  get FullWindowOverlay() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeFullWindowOverlay;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n","import * as React from 'react';\n\nimport TransitionProgressContext from './TransitionProgressContext';\n\nexport default function useTransitionProgress() {\n  const progress = React.useContext(TransitionProgressContext);\n\n  if (progress === undefined) {\n    throw new Error(\n      \"Couldn't find values for transition progress. Are you inside a screen in Native Stack?\"\n    );\n  }\n\n  return progress;\n}\n","import { BackHandler, Platform } from 'react-native';\n\nexport const isSearchBarAvailableForCurrentPlatform = [\n  'ios',\n  'android',\n].includes(Platform.OS);\n\nexport function executeNativeBackPress() {\n  // This function invokes the native back press event\n  BackHandler.exitApp();\n  return true;\n}\n"],"names":["freeze","children","placeholder","Suspense","fallback","Suspender","promiseCache","useRef","current","promise","Promise","resolve","undefined","Fragment","createContext","isPlatformSupported","Platform","OS","ENABLE_SCREENS","ENABLE_FREEZE","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","NativeFullWindowOverlay","ScreensNativeModules","NativeScreen","requireNativeComponent","NativeScreenContainer","NativeScreenNavigationContainer","this","DelayedFreeze","React","useState","freezeState","setFreezeState","setImmediate","Freeze","InnerScreen","ref","closing","Animated","Value","progress","goingForward","setRef","props","onComponentRef","setNativeProps","enabled","freezeOnBlur","rest","createAnimatedComponent","active","activityState","isNativeStack","gestureResponseDistance","console","warn","start","end","top","bottom","viewConfig","validAttributes","style","display","onTransitionProgress","event","nativeEvent","useNativeDriver","Provider","value","View","Component","styles","StyleSheet","create","headerSubview","position","right","flexDirection","alignItems","justifyContent","ScreenContext","Screen","ScreenWrapper","context","contextType","module","exports","ScreenContainer","hasTwoStates","ScreenStack","size","Children","count","childrenWithFreeze","map","child","index","key","descriptor","descriptors","freezeEnabled","options","ScreenStackHeaderConfig","ScreenStackHeaderSubview","SearchBar","isSearchBarAvailableForCurrentPlatform","FullWindowOverlay","ScreenStackHeaderBackButtonImage","type","Image","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","error","enableFreeze","shouldEnableReactFreeze","minor","parseInt","version","split","screensEnabled","shouldUseActivityState","useTransitionProgress","executeNativeBackPress","useContext","TransitionProgressContext","Error","BackHandler","exitApp","includes"],"sourceRoot":""}